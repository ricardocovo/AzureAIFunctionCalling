@page "/"
@rendermode InteractiveServer
@using Azure
@using Azure.AI
@using Azure.AI.OpenAI
@using System.Text.Json
@inject IConfiguration _configuration

@code {
    string _timeSheetApiUrl = "";
    OpenAIClient _api = null;
    bool _processing = false;
    string _prompt = "";
    string _errorMessage = "";
    List<DisplayMessage> _messages = new List<DisplayMessage>();

    #region tool definition
    ChatCompletionsFunctionToolDefinition getProjectsFunction = new ChatCompletionsFunctionToolDefinition()
        {
            Name = "get_projects",
            Description = "Gets the current available projects for the user.",
            Parameters = BinaryData.FromObjectAsJson(
                        new
                        {
                            Type = "object",
                            Properties = new { }
                        },
                        new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }),
        };

    ChatCompletionsFunctionToolDefinition addHoursToProject = new ChatCompletionsFunctionToolDefinition()
        {
            Name = "add_hours_to_projects",
            Description = "Adds hours to a project.",
            Parameters = BinaryData.FromObjectAsJson(
                       new
                       {
                           Type = "object",
                           Properties = new
                           {
                                ProjectId= new
                                {
                                    Type = "number",
                                    Description = "Id of the project to add hours to."
                                },
                               Hours = new
                               {
                                   Type = "number",
                                   Description = "Number of hours to log."
                               },
                               Description = new
                               {
                                   Type = "string",
                                   Description = "Description of the activity. Default: Some Activity-Explain!"
                               },
                               EntryDate = new
                               {
                                   Type = "string",
                                   Format = "date",
                                   Description = "Date of the activity. Default to current date"
                               }
                           },

                           Required = new[] { "hours", "description", "entryDate" },
                       }
                       ,
                       new JsonSerializerOptions() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }),
        };


   #endregion

    #region methods
    ChatCompletionsOptions GetChatCompletionsOptions()
    {
        var chatCompletionsOptions = new ChatCompletionsOptions()
            {
                DeploymentName = "gpt35",
                Messages =
                {
                    new ChatRequestSystemMessage($"You are a helpful asssistant, you help employees fill out their timesheets."),
                    
                },
                Tools = { getProjectsFunction, addHoursToProject },
                ToolChoice = ChatCompletionsToolChoice.Auto,
                MaxTokens = 100

            };

        foreach (var message in _messages)
        {
            if (message.Role == ChatRole.User)
                chatCompletionsOptions.Messages.Add(new ChatRequestUserMessage(message.Message));
            else if (message.Role == ChatRole.Assistant)
                chatCompletionsOptions.Messages.Add(new ChatRequestAssistantMessage(message.Message));
        }
        return chatCompletionsOptions;
    }

    async Task<ChatRequestToolMessage> GetToolCallResponseMessage(ChatCompletionsToolCall toolCall)
    {
        var functionToolCall = toolCall as ChatCompletionsFunctionToolCall;
        if (functionToolCall?.Name == getProjectsFunction.Name)
        {
            var getProjectsResult = await ApiWrapper.GetProjects(_timeSheetApiUrl);
            return new ChatRequestToolMessage(string.Join(',', getProjectsResult), toolCall.Id);
        }
        else if (functionToolCall?.Name == addHoursToProject.Name)
        {            
            var addHoursResult = await ApiWrapper.AddHoursToProject(_timeSheetApiUrl, functionToolCall.Arguments);
            return new ChatRequestToolMessage(addHoursResult, toolCall.Id);
        }
        else
        {
            // Handle other or unexpected calls
            throw new NotImplementedException();
        }
    }

    async Task ProcessChatCompletion(ChatCompletionsOptions options)
    {
        //send to the api
        Response<ChatCompletions> response = await _api.GetChatCompletionsAsync(options);
        ChatChoice responseChoice = response.Value.Choices[0];
        if (responseChoice.FinishReason == CompletionsFinishReason.ToolCalls)
        {
            // Add the assistant message with tool calls to the conversation history
            ChatRequestAssistantMessage toolCallHistoryMessage = new(responseChoice.Message);
            options.Messages.Add(toolCallHistoryMessage);

            // Add a new tool message for each tool call that is resolved
            foreach (ChatCompletionsToolCall toolCall in responseChoice.Message.ToolCalls)
            {
                options.Messages.Add(await GetToolCallResponseMessage(toolCall));
            }
            await ProcessChatCompletion(options);
        }
        else
        {
            _messages.Add(new DisplayMessage(ChatRole.Assistant, responseChoice.Message.Content));

        }
    }
    #endregion

    #region event handlers
    protected override void OnInitialized()
    {
        var endpoint = _configuration["OpenAIServiceConfig:EndPoint"] ?? "";
        var apiKey = _configuration["OpenAIServiceConfig:ApiKey"] ?? "";
        _timeSheetApiUrl = _configuration["TimesheetApi:Url"] ?? "";
        _api = new OpenAIClient(new Uri(endpoint), new AzureKeyCredential(apiKey));
    }

    void ResetChat()
    {
        _prompt = "";
        _errorMessage = "";
        _messages = new List<DisplayMessage>();
        StateHasChanged();
    }

    async Task SendPrompt()
    {
        try
        {
            _processing = true;
            _errorMessage = "";
            StateHasChanged();
            //add current message to the list
            var currentMessage = new DisplayMessage(ChatRole.User, _prompt);
            _messages.Add(currentMessage);
            //process
            var options = GetChatCompletionsOptions();
            await ProcessChatCompletion(options);


        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _prompt = "";
            _processing = false;
            StateHasChanged();
        }
    }
    #endregion
}
<PageTitle>Demo</PageTitle>

<h1>Let's chat!</h1>
<p style="color:red">@_errorMessage</p>
<div class="chat-area">
    @foreach (var item in _messages)
    {
        <div class="message">
            @if (item.Role == ChatRole.User)
            {
                <div class="user">
                    <b>User</b>
                    <div class="content">
                        @item.Message
                    </div>
                </div>
            }
            else
            {
                <div class="assistant">
                    <b>Assitant</b>
                    <div class="content">
                        @if (item.Message != null)
                        {
                            @((MarkupString)item.Message.ReplaceLineEndings("<br>"))
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>
@if (!_processing)
{
    <textarea rows="3" cols="60" @bind="_prompt" class="chat-input" />
    <br />
    <button class="btn btn-primary" @onclick="SendPrompt">
        Submit
    </button>
    <span>&nbsp;</span>
    <button class="btn btn-info" @onclick="ResetChat">
        Reset
    </button>
}
else
{
    <br>
    <h4>Processing...</h4>
}